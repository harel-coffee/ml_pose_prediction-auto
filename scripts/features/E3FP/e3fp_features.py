#!/usr/bin/env python
# -*- coding: utf-8 -*-

# =============================================================================
# the demo to generate the E3FP fingerprint.
##install the module through https://github.com/keiserlab/e3fp/tree/1.1
# =============================================================================

import sys, os
import subprocess
import multiprocessing
from multiprocessing import Manager
import pandas as pd
from rdkit import Chem
from e3fp.pipeline import fprints_from_mol
from e3fp.fingerprint.db import FingerprintDatabase
from e3fp.fingerprint.fprint import Fingerprint


def e3fp_generate(pdbname, ligname):
	'''must be .sdf format, the .mol2 format may raise error!!'''
	lig_path = './%s/%s_surflex/%s/%s.sdf' % (pdbname, pdbname, ligname, ligname)
	try:
		mol = Chem.SDMolSupplier('%s.sdf'%os.path.splitext(lig_path)[0])[0]
		fp = fprints_from_mol(mol)
	except:
		print('%s %s failed'%(pdbname, ligname))
		fp=None
	return fp


def e3fp_generate0(pdbname):
	'''the default .sdf file generated by schrodinger may be not well recognized by e3fp;
	thus use the convert.py in openeye to firstly convert the .mol2 to .sdf format'''
	lig_path = './%s/%s_prot/%s_l.mol2' % (pdbname, pdbname, pdbname)
	try:
		p = subprocess.Popen("module load openeye && convert.py %s_l.mol2 %s_l2.sdf"%(pdbname, pdbname), shell=True, cwd=os.path.dirname(lig_path))
		p.wait()
		mol = Chem.SDMolSupplier('%s2.sdf'%os.path.splitext(lig_path)[0])[0]
		#mol = Chem.MolFromMol2File(lig_path)
		fp = fprints_from_mol(mol)
	except:
		print('%s failed'%pdbname)
		fp=None	
				
	os.remove('%s2.sdf'%os.path.splitext(lig_path)[0])
	return fp



def e3fp_generate2(name, i, return_dict):
	lignames = [x for x in os.listdir('./%s/%s_surflex'%(name, name)) if (os.path.isdir('./%s/%s_surflex/%s'%(name, name, x)) and x!='1_000x')]
	fps = []
	for ligname in lignames:
		fp = e3fp_generate(name, ligname)
		fps.append([name, ligname, fp])
	
	fp0 = e3fp_generate0(name)
	fps.append([name, '1_000x', fp0])
	return_dict[i] = fps	


def main():
	names = [x for x in os.listdir('.') if os.path.isdir(x)]
	manger = Manager()
	return_dict = manger.dict()
	jobs = []
	pool = multiprocessing.Pool(32)
	for i, name in enumerate(names):
		p = pool.apply_async(e3fp_generate2, args=(name, i, return_dict))
		jobs.append(p)
	
	pool.close()
	pool.join()
	
	
	df = pd.DataFrame(sum(return_dict.values(), []))
	df.columns = ['pdb_id', 'lig_id', 'e3fp']
	df.sort_values(by=['pdb_id','lig_id'], inplace=True)
	df.reset_index(inplace=True)
	del df['index']
	db = FingerprintDatabase(fp_type=Fingerprint, level=5, name="e3fp")
	db.add_fingerprints([x[0] for x in df.e3fp])
	fold_db = db.fold(1024)
	results = fold_db.array.toarray().astype(int)
	df['e3fp'] = results.tolist()
	
	df.to_csv("e3fp_out.csv")
	os.system('bzip2 e3fp_out.csv')



if __name__ == '__main__':
    main()


